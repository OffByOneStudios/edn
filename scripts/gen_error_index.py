#!/usr/bin/env python3
"""Generate a consolidated error code index by scanning source/tests for E/W codes.

Outputs a Markdown table to stdout and (optionally) updates docs/ERRORS.md.

Heuristics:
- Match patterns E[0-9A-F]{3,4} and W[0-9A-F]{3,4}
- De-duplicate; sort lexicographically.
- Future: map codes to canonical messages by invoking a reflection hook.
"""
from __future__ import annotations
import re, sys, pathlib, argparse, subprocess, json

ROOT = pathlib.Path(__file__).resolve().parents[1]
CODE_PATTERN = re.compile(r'\b([EW][0-9A-F]{3,4})\b')
IGNORE_DIRS = {'.git','build','vcpkg_installed','Testing','__pycache__'}

def iter_files(root: pathlib.Path):
    for p in root.rglob('*'):
        if not p.is_file():
            continue
        rel_parts = set(p.relative_to(root).parts)
        if rel_parts & IGNORE_DIRS:
            continue
        if p.suffix in {'.cpp','.hpp','.edn','.rs','.md','.txt'}:
            yield p

def collect_codes():
    codes = {}
    for f in iter_files(ROOT):
        try:
            text = f.read_text(errors='ignore')
        except Exception:
            continue
        for m in CODE_PATTERN.finditer(text):
            code = m.group(1)
            codes.setdefault(code, set()).add(str(f.relative_to(ROOT)))
    return codes

MD_HEADER = """# Error Code Index (Generated)

This file is generated by `scripts/gen_error_index.py`. Do not hand-edit.

| Code | Occurrences |
|------|-------------|
"""

def render_markdown(codes: dict[str,set[str]]):
    lines = [MD_HEADER]
    for code in sorted(codes.keys()):
        occ = ', '.join(sorted(codes[code]))
        lines.append(f"| {code} | {occ} |\n")
    return ''.join(lines)

def main():
    ap = argparse.ArgumentParser()
    ap.add_argument('--write', action='store_true', help='Write docs/ERRORS.md')
    args = ap.parse_args()
    codes = collect_codes()
    md = render_markdown(codes)
    if args.write:
        out = ROOT / 'docs' / 'ERRORS.md'
        out.write_text(md)
    sys.stdout.write(md)

if __name__ == '__main__':
    main()
